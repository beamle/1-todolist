// import React from 'react';
// import ReactDOM from 'react-dom/client';
// import './index.css';
// import {Provider} from "react-redux";
// import {store} from "./store";
// import App from "./app/App";
// import BrowserProvider, {BrowserRouter} from "react-router-dom";
//
// const root = ReactDOM.createRoot(
//     document.getElementById('root') as HTMLElement
// );
// root.render(
//     <Provider store={store}>
//         <BrowserRouter>
//             <App/>
//         </BrowserRouter>
//     </Provider>
// );



//1,
// import React, { useState } from 'react'
// import ReactDOM from 'react-dom/client';
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';
// import axios, { AxiosError } from 'axios';
// import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux';
// import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk';
//
//
// // Types
// type NullableType<T> = null | T
//
// type LoginFieldsType = {
//     email: string
//     password: string
// }
//
// // API
// const instance = axios.create({baseURL: 'https://exams-frontend.kimitsu.it-incubator.ru/api/'})
//
// const api = {
//     login(data: LoginFieldsType) {
//         return instance.post('auth/login', data)
//     },
// }
//
//
// // Reducer
// const initState = {
//     isLoading: false,
//     error: null as NullableType<string>,
//     isLoggedIn: false,
// }
//
// type InitStateType = typeof initState
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case 'APP/SET-IS-LOGGED-IN':
//             return {...state, isLoggedIn: action.isLoggedIn}
//         case 'APP/IS-LOADING':
//             return {...state, isLoading: action.isLoading}
//         case 'APP/SET-ERROR':
//             return {...state, error: action.error}
//         default:
//             return state
//     }
// }
//
// // Actions
// const setIsLoggedIn = (isLoggedIn: boolean) => ({type: 'APP/SET-IS-LOGGED-IN', isLoggedIn} as const)
// const setLoadingAC = (isLoading: boolean) => ({type: 'APP/IS-LOADING', isLoading} as const)
// const setError = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)
// type ActionsType = | ReturnType<typeof setIsLoggedIn> | ReturnType<typeof setLoadingAC> | ReturnType<typeof setError>
//
// // Thunk
// const loginTC = (values: LoginFieldsType): AppThunk => (dispatch) => {
//     dispatch(setLoadingAC(true))
//     api.login(values)
//         .then((res) => {
//             dispatch(setIsLoggedIn(true))
//             alert('–í—ã –∑–∞–ª–æ–≥–∏–Ω–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ')
//         })
//         .catch((e) => {
//             console.log(e.response.data.errors)
//             setError(e.response.data.errors)
//         })
//         .finally(() => {
//             dispatch(setLoadingAC(false))
//         })
// }
//
// // Store
// const rootReducer = combineReducers({
//     app: appReducer,
// })
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
//
// // Loader
// export const Loader = () => {
//     return <h1>Loading ...</h1>
// }
//
// // App
// export const App = () => {
//
//     const dispatch = useAppDispatch()
//
//     const [form, setForm] = useState<LoginFieldsType>({email: '', password: ''})
//
//     const error = useAppSelector(state => state.app.error)
//     const isLoading = useAppSelector(state => state.app.isLoading)
//
//     const changeFormValuesHandler = (e: React.ChangeEvent<HTMLInputElement>, field: string) => {
//         if (field === 'email') {
//             setForm({...form, email: e.currentTarget.value})
//         }
//         if (field === 'password') {
//             setForm({...form, password: e.currentTarget.value})
//         }
//     };
//
//     const submitForm = (e: React.MouseEvent<HTMLButtonElement>) => {
//         e.preventDefault()
//         dispatch(loginTC(form))
//     };
//
//     return (
//         <div>
//             {!!error && <h2 style={{color: 'red'}}>{error}</h2>}
//             {isLoading && <Loader/>}
//             <form>
//                 <div>
//                     <input placeholder={'–í–≤–µ–¥–∏—Ç–µ email'}
//                            value={form.email}
//                            onChange={(e) => changeFormValuesHandler(e, 'email')}
//                     />
//                 </div>
//                 <div>
//                     <input type={'password'}
//                            placeholder={'–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'}
//                            value={form.password}
//                            onChange={(e) => changeFormValuesHandler(e, 'password')}
//                     />
//                 </div>
//                 <button type="submit" onClick={submitForm}>–ó–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è</button>
//             </form>
//         </div>
//     );
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<Provider store={store}> <App/></Provider>)
//
// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Ñ–æ—Ä–º–∞ –ª–æ–≥–∏–Ω–∏–∑–∞—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ –ª—é–±—ã–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è.
// // –£ –≤–∞—Å —ç—Ç–æ –Ω–∞–≤—Ä—è–¥ –ª–∏ –ø–æ–ª—É—á–∏—Ç—Å—è üòà, —Ç.–∫. –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å.
// // –û—Ç–∫—Ä–æ–π—Ç–µ Network –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å.
// // –ó–∞–¥–∞—á–∞: –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –∫–æ—Ç–æ—Ä—É—é –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≥–æ–≤–æ—Ä—è—â—É—é –æ —Ç–æ–º —á—Ç–æ email –∏–ª–∏ password –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.
//
// // –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∫–æ–¥—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª–∏—Ç —ç—Ç–æ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å.
// // üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: dispatch('Error message')
// // ‚ùó –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É –Ω–µ –Ω–∞–¥–æ, —Ç.–∫. —Ç–∞–º –µ—Å—Ç—å –º–Ω–æ–≥–æ –Ω—é–∞–Ω—Å–æ–≤, –æ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —É–∑–Ω–∞–µ—Ç–µ –ø–æ–∑–∂–µ

//2
// import React, { useEffect } from 'react'
// import ReactDOM from 'react-dom/client';
// import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux'
// import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk';
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
// import axios from 'axios';
//
// // Types
// type PostType = {
//     body: string
//     id: string
//     title: string
//     userId: string
// }
//
// type PayloadType = {
//     title: string
//     body?: string
// }
//
//
// // Api
// const instance = axios.create({baseURL: 'https://exams-frontend.kimitsu.it-incubator.ru/api/'})
//
// const postsAPI = {
//     getPosts() {
//         return instance.get<PostType[]>('posts')
//     },
//     updatePostTitle(postId: string, post: PayloadType) {
//         return instance.put<PostType>(`posts/${postId}`, post)
//     }
// }
//
//
// // Reducer
// const initState = [] as PostType[]
//
// type InitStateType = typeof initState
//
// const postsReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case 'POSTS/GET-POSTS':
//             return action.posts
//
//         case 'POSTS/UPDATE-POST-TITLE':
//             return state.map((p) => {
//                 debugger
//                 if (p.id === action.post.id) {
//                     return {...p, title: action.post.title}
//                 } else {
//                     return p
//                 }
//             })
//
//         default:
//             return state
//     }
// }
//
// const getPostsAC = (posts: PostType[]) => ({type: 'POSTS/GET-POSTS', posts} as const)
// const updatePostTitleAC = (post: PostType) => ({type: 'POSTS/UPDATE-POST-TITLE', post} as const)
// type ActionsType = ReturnType<typeof getPostsAC> | ReturnType<typeof updatePostTitleAC>
//
// const getPostsTC = (): AppThunk => (dispatch) => {
//     postsAPI.getPosts()
//         .then((res) => {
//             dispatch(getPostsAC(res.data))
//         })
// }
//
// const updatePostTC = (postId: string): AppThunk => (dispatch, getState: any) => {
//     debugger
//     try {
//         debugger
//         console.log(getState())
//         console.log(postId)
//         const currentPost = getState().find((p: PostType) => p.id === postId) // tut gavno
//         console.log(currentPost)
//
//         if (currentPost) {
//             const payload = {title: '–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞. Backend —Å–∞–º —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π title'}
//             postsAPI.updatePostTitle(postId, payload)
//                 .then((res) => {
//                     dispatch(updatePostTitleAC(res.data))
//                 })
//         }
//     } catch (e) {
//         alert('–û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å üò¢')
//     }
//
// }
//
// // Store
// const rootReducer = combineReducers({
//     posts: postsReducer,
// })
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
// // App
// const App = () => {
//     const dispatch = useAppDispatch()
//     const posts = useAppSelector(state => state.posts)
//
//     useEffect(() => {
//         dispatch(getPostsTC())
//     }, [])
//
//     const updatePostHandler = (postId: string) => {
//         debugger
//         dispatch(updatePostTC(postId))
//     }
//
//     return (
//         <>
//             <h1>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h1>
//             {
//                 posts.map(p => {
//                     return <div key={p.id}>
//                         <b>title</b>: {p.title}
//                         <button onClick={() => updatePostHandler(p.id)}>–û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç</button>
//                     </div>
//                 })
//             }
//         </>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<Provider store={store}> <App/></Provider>)
//
// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ alert —Å –æ—à–∏–±–∫–æ–π.
// // Debugger / network / console.log –≤–∞–º –≤ –ø–æ–º–æ—â—å
// // –ù–∞–π–¥–∏—Ç–µ –æ—à–∏–±–∫—É –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
//
// // üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: const payload = {...currentPost, tile: '–õ–µ—Ç–∏–º üöÄ'}

//3


// import axios from 'axios'
// import React, { useEffect } from 'react'
// import ReactDOM from 'react-dom/client';
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';
// import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux';
// import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk';
//
// // Types
// type CommentType = {
//     postId: string
//     id: string
//     name: string
//     email: string
//     body: string
// }
//
// // Api
// const instance = axios.create({baseURL: 'https://exams-frontend.kimitsu.it-incubator.ru/api/'})
//
// const commentsAPI = {
//     getComments() {
//         return instance.get<CommentType[]>('comments')
//     }
// }
//
// // Reducer
// const initState = [] as CommentType[]
//
// type InitStateType = typeof initState
//
// const commentsReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case 'COMMENTS/GET-COMMENTS':
//             return action.comments
//         default:
//             return state
//     }
// }
//
// const getCommentsAC = (comments: CommentType[]) => ({type: 'COMMENTS/GET-COMMENTS', comments} as const)
// type ActionsType = ReturnType<typeof getCommentsAC>
//
// const getCommentsTC = (): ThunkAction<any, any, any, any> => (dispatch) => {
//     commentsAPI.getComments()
//         .then((res) => {
//             dispatch(getCommentsAC(res.data))
//         })
// }
//
//
// // Store
// const rootReducer = combineReducers({
//     comments: commentsReducer,
// })
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
// // App
// export const App = () => {
//
//     const comments = useAppSelector(state => state.comments)
//     const dispatch = useAppDispatch()
//
//     useEffect(() => {
//         dispatch(getCommentsTC())
//     }, [])
//
//     return (
//         <>
//             <h1>üìù –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</h1>
//             {
//                 comments.map(c => {
//                     return <div key={c.id}><b>Comment</b>: {c.body} </div>
//                 })
//             }
//         </>
//     )
// }
//
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<Provider store={store}> <App/></Provider>)
//
// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –í–∞—à–∞ –∑–∞–¥–∞—á–∞ —Å—Ç–æ–∏—Ç –≤ —Ç–æ–º —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã –≤ –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤—ã–π —Ç–∏–ø ThunkAction<any, any, any, any>.
// // –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ any, any, any, any —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞—Ç—å thunk creator?
// // –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
//
// // üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: unknown status isDone void
//

//SAVE FOR FUTURE EXAMPLE!!! How to disabled button !!!!
// import React, { useEffect } from 'react'
// import ReactDOM from 'react-dom/client';
// import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux'
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
// import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk'
// import axios from 'axios';
//
//
// // Types
// type PostDomainType = PostType & {
//     isDisabled: boolean
// }
//
// type PostType = {
//     body: string
//     id: string
//     title: string
//     userId: string
// }
//
//
// // Api
// const instance = axios.create({baseURL: 'https://exams-frontend.kimitsu.it-incubator.ru/api/'})
//
// const postsAPI = {
//     getPosts() {
//         return instance.get<PostType[]>('posts')
//     },
//     deletePost(id: string) {
//         return instance.delete<{ message: string }>(`posts/${id}?delay=3`)
//     }
// }
//
//
// // Reducer
// const initState = {
//     isLoading: false,
//     posts: [] as PostDomainType[]
// }
//
// type InitStateType = typeof initState
//
// const postsReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case 'POSTS/GET-POSTS':
//             return {
//                 ...state, posts: action.posts.map(t => {
//                     return {...t, isDisabled: false}
//                 })
//             }
//
//         case 'POSTS/DELETE-POST':
//             return {...state, posts: state.posts.filter(t => t.id !== action.id)}
//
//         case 'POSTS/IS-LOADING':
//             return {...state, isLoading: action.isLoading}
//
//         case 'POSTS/IS-DISABLED':
//             return {
//                 ...state, posts: state.posts.map((t) => {
//                     if (t.id === action.id) {
//                         return {...t, isDisabled: action.isDisabled}
//                     } else {
//                         return t
//                     }
//                 })
//             }
//
//         default:
//             return state
//     }
// }
//
// const getPostsAC = (posts: PostType[]) => ({type: 'POSTS/GET-POSTS', posts} as const)
// const deletePostAC = (id: string) => ({type: 'POSTS/DELETE-POST', id} as const)
// const setLoadingAC = (isLoading: boolean) => ({type: 'POSTS/IS-LOADING', isLoading} as const)
// const setIsDisabled = (isDisabled: boolean, id: string) => ({type: 'POSTS/IS-DISABLED', isDisabled, id} as const)
// type ActionsType =
//     | ReturnType<typeof getPostsAC>
//     | ReturnType<typeof deletePostAC>
//     | ReturnType<typeof setLoadingAC>
//     | ReturnType<typeof setIsDisabled>
//
// // Thunk
// const getPostsTC = (): AppThunk => (dispatch) => {
//     postsAPI.getPosts()
//         .then((res) => {
//             dispatch(getPostsAC(res.data))
//         })
// }
//
// const deletePostTC = (id: string): AppThunk => (dispatch) => {
//     dispatch(setIsDisabled(true, id))
//     dispatch(setLoadingAC(true))
//     postsAPI.deletePost(id)
//         .then((res) => {
//             dispatch(deletePostAC(id))
//             dispatch(setLoadingAC(false))
//         })
// }
//
// // Store
// const rootReducer = combineReducers({
//     posts: postsReducer,
// })
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
//
// // Loader
// export const Loader = () => {
//     return (
//         <h1>Loading ...</h1>
//     )
// }
//
// // App
// const App = () => {
//     const dispatch = useAppDispatch()
//     const posts = useAppSelector(state => state.posts.posts)
//     const isLoading = useAppSelector(state => state.posts.isLoading)
//
//     useEffect(() => {
//         dispatch(getPostsTC())
//     }, [])
//
//     const deletePostHandler = (id: string) => {
//         dispatch(deletePostTC(id))
//     };
//
//     return (
//         <div>
//             <div style={{position: 'absolute', top: '0px'}}>
//                 {isLoading && <Loader/>}
//             </div>
//             <div style={{marginTop: '100px'}}>
//                 <h1>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h1>
//                 {posts.map(p => {
//                     return (
//                         <div key={p.id}>
//                             <b>title</b>: {p.title}
//                             <button style={{marginLeft: '15px'}}
//                                     onClick={() => deletePostHandler(p.id)}
//                                     disabled={p.isDisabled}
//                             >
//                                 —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç
//                             </button>
//                         </div>
//                     )
//                 })}
//             </div>
//         </div>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<Provider store={store}> <App/></Provider>)
//
// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤.
// // –û—Ç–∫—Ä–æ–π—Ç–µ network –∏ –±—ã—Å—Ç—Ä–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–¥—Ä—è–¥.
// // –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∫–ª–∞–¥–∫—É Preview –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –æ—Ç–≤–µ—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞
// // –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç "Post has been successfully deleted",
// // –∞ —Å–ª–µ–¥—É—é—â–∏–µ "Post with id: 63626ac315d01f80765587ee does not exist"
// // –¢.–µ. –±—ç–∫–µ–Ω–¥ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ —É–¥–∞–ª—è–µ—Ç, –∞ –ø–æ—Ç–æ–º —É–∂–µ –Ω–µ –º–æ–∂–µ—Ç, —Ç.–∫. –ø–æ—Å—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
//
// // –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–ª–∏–∫–µ –∑–∞–¥–∏–∑–∞–±–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è,
// // —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ –Ω–µ –¥–∞–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–ª–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
// // –ù–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
//
// // üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: style={{marginRight: '20px'}}

import React from 'react'
import ReactDOM from 'react-dom/client';
import { BrowserRouter, Navigate, Route, Routes } from 'react-router-dom'


export const PageNotFound = () => {
    return <h2>‚õî 404. Page not found ‚õî</h2>
}

export const Profile = () => {
    return <h2>üòé –ü—Ä–æ—Ñ–∏–ª—å</h2>
}


export const Main = () => {
    return (
        <>
            <h2>‚úÖ –°–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤</h2>
            <h2>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h2>
        </>
    )
}

// App
export const App = () => {

    return (
        <Routes>
            <Route path={'profile'} element={<Profile/>}/>
            <Route path={'*'} element={<Navigate to="/profile" />} />
        </Routes>
    )
}


const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
root.render(<BrowserRouter><App/></BrowserRouter>)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –í–º–µ—Å—Ç–æ –•–•–• –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–æ—É—Ç —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ —á—Ç–æ–±—ã –±—É–¥–µ—Ç –≤ —É—Ä–ª–µ (login –∏–ª–∏ home –∏–ª–∏...)
// –≤–∞—Å –≤—Å–µ–≥–¥–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–ª–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø—Ä–∏ –≤ —ç—Ç–æ –≤ —É—Ä–ª–µ –ø–æ –∏—Ç–æ–≥—É
// –±—ã–ª –∞–¥—Ä–µ—Å /profile

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: <Route path={'/'} element={'to profile page'}/>